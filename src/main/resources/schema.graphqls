#
# Schemas must have at least a query root type
#
schema {
    query: Query
    mutation: Mutation
}

#
# Type definitions
#
type Transaction {
    id: String!
    date: String!
    item: String
    amount: Float
    references: [String]
    description: String
}

type TransactionByItem {
    id: String!
    item: String
    amount: Float
    transactions: [Transaction]
}

type Balance {
    income: Float
    outcome: Float
    current: Float
    end: String
    start: String
    period: String
}

type BalanceFiltered {
    item: String
    end: String
    start: String
    count: Int
    income: Float
    outcome: Float
    average: Float
}

type Statistics {
    min: Float
    max: Float
    sum: Float
    median: Float
    average: Float
}

type BalanceSummary {
    balance: Statistics
    income: Statistics
    outcome: Statistics
}

type ChartDataSet {
    data: [Float]
    label: String
    backgroundColor: String
}

type Chart {
    title: String
    labels: [String]
    datasets: [ChartDataSet]
}

type ChartPieDataSet {
    data: [Float]
    label: String
    backgroundColor: [String]
}

type PieChart {
    title: String
    labels: [String]
    datasets: [ChartPieDataSet]
}

#
# Input definitions
#

input Account {
    name: String
    owner: String
    currency: String
}

enum PeriodType {
    DAY,
    WEEK,
    MONTH
}

# Define queries provided
type Query {

    ## this are data queries
    accounts: [String]

    transactions(account: String): [Transaction]                                                    # retrieve transactions
    transactionsByText(account: String, text: String): [Transaction]                                # retrieve transactions that contains a given text (no case-sensitive)
    transactionsByPeriod(account: String, start: String, end: String): [Transaction]                # retrieve transactions made in a period of time
    transactionsByItem(item: String): TransactionByItem
    transactionsByItems(account: String): [TransactionByItem]
    transactionsByItemByPeriod(start: String, end: String, item: String): TransactionByItem
    transactionsByItemsByPeriod(account: String, start: String, end: String): [TransactionByItem]

    balances(account: String): [Balance]
    balancesByPeriod(account: String, start: String, end: String): [Balance]
    balanceByText(account: String, text: String): BalanceFiltered
    balanceByItem(item: String): BalanceFiltered
    balanceSummary: BalanceSummary

    ## this are chart queries
    accountBalanceChart(account: String, period: PeriodType): Chart                                 # retrieve a bar chart of account balance for each period of time, a period of time can be Day, Week, Month

    chartBalance: Chart
    chartBarBalance: Chart
    chartExpensesByPeriodByItem: PieChart

    chartBarByWeekByItem: Chart
    chartBarByPeriodByItem: Chart
}

# Define mutations provided
type Mutation {
    load (account: String, input: String): Boolean
    create(input: Account): Boolean
}