#
# Schemas must have at least a query root type
#
schema {
    query: Query
    mutation: Mutation
}

#
# Type definitions
#
type Transaction {
    id: String!
    date: String!
    item: String
    amount: Float
    references: [String]
    description: String
}

type TransactionByItem {
    id: String!
    item: String
    amount: Float
    transactions: [Transaction]
}

type Balance {
    income: Float
    outcome: Float
    current: Float
    end: String
    start: String
    period: String
}

type BalanceFiltered {
    item: String
    end: String
    start: String
    count: Int
    income: Float
    outcome: Float
    average: Float
}

type ChartDataSet {
    data: [Float]
    label: String
    backgroundColor: String
}

type ChartPieDataSet {
    data: [Float]
    label: String
    backgroundColor: [String]
}

type LineChart {
    title: String
    labels: [String]
    datasets: [ChartDataSet]
}

type PieChart {
    title: String
    labels: [String]
    datasets: [ChartPieDataSet]
}

#
# Input definitions
#

# Define queries provided
type Query {
    transactions: [Transaction]
    transactionsByText(text: String): [Transaction]
    transactionsByPeriod(start: String, end: String): [Transaction]

    transactionsByItem(item: String): TransactionByItem
    transactionsByItemByPeriod(start: String, end: String, item: String): TransactionByItem
    transactionsByItems: [TransactionByItem]
    transactionsByItemsByPeriod(start: String, end: String): [TransactionByItem]

    balances: [Balance]
    balancesByPeriod(start: String, end: String): [Balance]
    balanceByText(text: String): BalanceFiltered
    balanceByItem(item: String): BalanceFiltered

    chartLineByPeriod: LineChart
    chartPieByWeekByItem: PieChart
    chartBarByWeekByItem: LineChart
    chartBarByPeriodByItem: LineChart
}

# Define mutations provided
type Mutation {
    load (input: String): Boolean
}